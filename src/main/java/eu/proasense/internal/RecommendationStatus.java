/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package eu.proasense.internal;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-31")
public class RecommendationStatus implements org.apache.thrift.TBase<RecommendationStatus, RecommendationStatus._Fields>, java.io.Serializable, Cloneable, Comparable<RecommendationStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecommendationStatus");

  private static final org.apache.thrift.protocol.TField ACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("actor", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RECOMMENDATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendationId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecommendationStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecommendationStatusTupleSchemeFactory());
  }

  public String actor; // required
  public long timestamp; // required
  /**
   * 
   * @see Status
   */
  public Status status; // required
  public String comments; // optional
  public String recommendationId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTOR((short)1, "actor"),
    TIMESTAMP((short)2, "timestamp"),
    /**
     * 
     * @see Status
     */
    STATUS((short)3, "status"),
    COMMENTS((short)4, "comments"),
    RECOMMENDATION_ID((short)5, "recommendationId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTOR
          return ACTOR;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // STATUS
          return STATUS;
        case 4: // COMMENTS
          return COMMENTS;
        case 5: // RECOMMENDATION_ID
          return RECOMMENDATION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTOR, new org.apache.thrift.meta_data.FieldMetaData("actor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMENDATION_ID, new org.apache.thrift.meta_data.FieldMetaData("recommendationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecommendationStatus.class, metaDataMap);
  }

  public RecommendationStatus() {
  }

  public RecommendationStatus(
    String actor,
    long timestamp,
    Status status,
    String recommendationId)
  {
    this();
    this.actor = actor;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.status = status;
    this.recommendationId = recommendationId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecommendationStatus(RecommendationStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActor()) {
      this.actor = other.actor;
    }
    this.timestamp = other.timestamp;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
    if (other.isSetRecommendationId()) {
      this.recommendationId = other.recommendationId;
    }
  }

  public RecommendationStatus deepCopy() {
    return new RecommendationStatus(this);
  }

  @Override
  public void clear() {
    this.actor = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.status = null;
    this.comments = null;
    this.recommendationId = null;
  }

  public String getActor() {
    return this.actor;
  }

  public RecommendationStatus setActor(String actor) {
    this.actor = actor;
    return this;
  }

  public void unsetActor() {
    this.actor = null;
  }

  /** Returns true if field actor is set (has been assigned a value) and false otherwise */
  public boolean isSetActor() {
    return this.actor != null;
  }

  public void setActorIsSet(boolean value) {
    if (!value) {
      this.actor = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public RecommendationStatus setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see Status
   */
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public RecommendationStatus setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public RecommendationStatus setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public String getRecommendationId() {
    return this.recommendationId;
  }

  public RecommendationStatus setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  public void unsetRecommendationId() {
    this.recommendationId = null;
  }

  /** Returns true if field recommendationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendationId() {
    return this.recommendationId != null;
  }

  public void setRecommendationIdIsSet(boolean value) {
    if (!value) {
      this.recommendationId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTOR:
      if (value == null) {
        unsetActor();
      } else {
        setActor((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    case RECOMMENDATION_ID:
      if (value == null) {
        unsetRecommendationId();
      } else {
        setRecommendationId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTOR:
      return getActor();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case STATUS:
      return getStatus();

    case COMMENTS:
      return getComments();

    case RECOMMENDATION_ID:
      return getRecommendationId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTOR:
      return isSetActor();
    case TIMESTAMP:
      return isSetTimestamp();
    case STATUS:
      return isSetStatus();
    case COMMENTS:
      return isSetComments();
    case RECOMMENDATION_ID:
      return isSetRecommendationId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecommendationStatus)
      return this.equals((RecommendationStatus)that);
    return false;
  }

  public boolean equals(RecommendationStatus that) {
    if (that == null)
      return false;

    boolean this_present_actor = true && this.isSetActor();
    boolean that_present_actor = true && that.isSetActor();
    if (this_present_actor || that_present_actor) {
      if (!(this_present_actor && that_present_actor))
        return false;
      if (!this.actor.equals(that.actor))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_recommendationId = true && this.isSetRecommendationId();
    boolean that_present_recommendationId = true && that.isSetRecommendationId();
    if (this_present_recommendationId || that_present_recommendationId) {
      if (!(this_present_recommendationId && that_present_recommendationId))
        return false;
      if (!this.recommendationId.equals(that.recommendationId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_actor = true && (isSetActor());
    list.add(present_actor);
    if (present_actor)
      list.add(actor);

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    boolean present_recommendationId = true && (isSetRecommendationId());
    list.add(present_recommendationId);
    if (present_recommendationId)
      list.add(recommendationId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecommendationStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActor()).compareTo(other.isSetActor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actor, other.actor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendationId()).compareTo(other.isSetRecommendationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendationId, other.recommendationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecommendationStatus(");
    boolean first = true;

    sb.append("actor:");
    if (this.actor == null) {
      sb.append("null");
    } else {
      sb.append(this.actor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetComments()) {
      if (!first) sb.append(", ");
      sb.append("comments:");
      if (this.comments == null) {
        sb.append("null");
      } else {
        sb.append(this.comments);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("recommendationId:");
    if (this.recommendationId == null) {
      sb.append("null");
    } else {
      sb.append(this.recommendationId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (actor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actor' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (recommendationId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recommendationId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecommendationStatusStandardSchemeFactory implements SchemeFactory {
    public RecommendationStatusStandardScheme getScheme() {
      return new RecommendationStatusStandardScheme();
    }
  }

  private static class RecommendationStatusStandardScheme extends StandardScheme<RecommendationStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecommendationStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actor = iprot.readString();
              struct.setActorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = eu.proasense.internal.Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECOMMENDATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recommendationId = iprot.readString();
              struct.setRecommendationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecommendationStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actor != null) {
        oprot.writeFieldBegin(ACTOR_FIELD_DESC);
        oprot.writeString(struct.actor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        if (struct.isSetComments()) {
          oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
          oprot.writeString(struct.comments);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recommendationId != null) {
        oprot.writeFieldBegin(RECOMMENDATION_ID_FIELD_DESC);
        oprot.writeString(struct.recommendationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecommendationStatusTupleSchemeFactory implements SchemeFactory {
    public RecommendationStatusTupleScheme getScheme() {
      return new RecommendationStatusTupleScheme();
    }
  }

  private static class RecommendationStatusTupleScheme extends TupleScheme<RecommendationStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecommendationStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.actor);
      oprot.writeI64(struct.timestamp);
      oprot.writeI32(struct.status.getValue());
      oprot.writeString(struct.recommendationId);
      BitSet optionals = new BitSet();
      if (struct.isSetComments()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetComments()) {
        oprot.writeString(struct.comments);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecommendationStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.actor = iprot.readString();
      struct.setActorIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      struct.status = eu.proasense.internal.Status.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.recommendationId = iprot.readString();
      struct.setRecommendationIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.comments = iprot.readString();
        struct.setCommentsIsSet(true);
      }
    }
  }

}

