/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package eu.proasense.internal;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-31")
public class ModelResponse implements org.apache.thrift.TBase<ModelResponse, ModelResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ModelResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelResponse");

  private static final org.apache.thrift.protocol.TField MODEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("componentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BLOB_FIELD_DESC = new org.apache.thrift.protocol.TField("blob", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelResponseTupleSchemeFactory());
  }

  public String modelType; // required
  public String componentId; // required
  public String blob; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_TYPE((short)1, "modelType"),
    COMPONENT_ID((short)2, "componentId"),
    BLOB((short)3, "blob");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_TYPE
          return MODEL_TYPE;
        case 2: // COMPONENT_ID
          return COMPONENT_ID;
        case 3: // BLOB
          return BLOB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOB, new org.apache.thrift.meta_data.FieldMetaData("blob", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelResponse.class, metaDataMap);
  }

  public ModelResponse() {
  }

  public ModelResponse(
    String modelType,
    String componentId,
    String blob)
  {
    this();
    this.modelType = modelType;
    this.componentId = componentId;
    this.blob = blob;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelResponse(ModelResponse other) {
    if (other.isSetModelType()) {
      this.modelType = other.modelType;
    }
    if (other.isSetComponentId()) {
      this.componentId = other.componentId;
    }
    if (other.isSetBlob()) {
      this.blob = other.blob;
    }
  }

  public ModelResponse deepCopy() {
    return new ModelResponse(this);
  }

  @Override
  public void clear() {
    this.modelType = null;
    this.componentId = null;
    this.blob = null;
  }

  public String getModelType() {
    return this.modelType;
  }

  public ModelResponse setModelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  public void unsetModelType() {
    this.modelType = null;
  }

  /** Returns true if field modelType is set (has been assigned a value) and false otherwise */
  public boolean isSetModelType() {
    return this.modelType != null;
  }

  public void setModelTypeIsSet(boolean value) {
    if (!value) {
      this.modelType = null;
    }
  }

  public String getComponentId() {
    return this.componentId;
  }

  public ModelResponse setComponentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  public void unsetComponentId() {
    this.componentId = null;
  }

  /** Returns true if field componentId is set (has been assigned a value) and false otherwise */
  public boolean isSetComponentId() {
    return this.componentId != null;
  }

  public void setComponentIdIsSet(boolean value) {
    if (!value) {
      this.componentId = null;
    }
  }

  public String getBlob() {
    return this.blob;
  }

  public ModelResponse setBlob(String blob) {
    this.blob = blob;
    return this;
  }

  public void unsetBlob() {
    this.blob = null;
  }

  /** Returns true if field blob is set (has been assigned a value) and false otherwise */
  public boolean isSetBlob() {
    return this.blob != null;
  }

  public void setBlobIsSet(boolean value) {
    if (!value) {
      this.blob = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_TYPE:
      if (value == null) {
        unsetModelType();
      } else {
        setModelType((String)value);
      }
      break;

    case COMPONENT_ID:
      if (value == null) {
        unsetComponentId();
      } else {
        setComponentId((String)value);
      }
      break;

    case BLOB:
      if (value == null) {
        unsetBlob();
      } else {
        setBlob((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_TYPE:
      return getModelType();

    case COMPONENT_ID:
      return getComponentId();

    case BLOB:
      return getBlob();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_TYPE:
      return isSetModelType();
    case COMPONENT_ID:
      return isSetComponentId();
    case BLOB:
      return isSetBlob();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelResponse)
      return this.equals((ModelResponse)that);
    return false;
  }

  public boolean equals(ModelResponse that) {
    if (that == null)
      return false;

    boolean this_present_modelType = true && this.isSetModelType();
    boolean that_present_modelType = true && that.isSetModelType();
    if (this_present_modelType || that_present_modelType) {
      if (!(this_present_modelType && that_present_modelType))
        return false;
      if (!this.modelType.equals(that.modelType))
        return false;
    }

    boolean this_present_componentId = true && this.isSetComponentId();
    boolean that_present_componentId = true && that.isSetComponentId();
    if (this_present_componentId || that_present_componentId) {
      if (!(this_present_componentId && that_present_componentId))
        return false;
      if (!this.componentId.equals(that.componentId))
        return false;
    }

    boolean this_present_blob = true && this.isSetBlob();
    boolean that_present_blob = true && that.isSetBlob();
    if (this_present_blob || that_present_blob) {
      if (!(this_present_blob && that_present_blob))
        return false;
      if (!this.blob.equals(that.blob))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_modelType = true && (isSetModelType());
    list.add(present_modelType);
    if (present_modelType)
      list.add(modelType);

    boolean present_componentId = true && (isSetComponentId());
    list.add(present_componentId);
    if (present_componentId)
      list.add(componentId);

    boolean present_blob = true && (isSetBlob());
    list.add(present_blob);
    if (present_blob)
      list.add(blob);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModelType()).compareTo(other.isSetModelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelType, other.modelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponentId()).compareTo(other.isSetComponentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentId, other.componentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlob()).compareTo(other.isSetBlob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blob, other.blob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelResponse(");
    boolean first = true;

    sb.append("modelType:");
    if (this.modelType == null) {
      sb.append("null");
    } else {
      sb.append(this.modelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("componentId:");
    if (this.componentId == null) {
      sb.append("null");
    } else {
      sb.append(this.componentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blob:");
    if (this.blob == null) {
      sb.append("null");
    } else {
      sb.append(this.blob);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (modelType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelType' was not present! Struct: " + toString());
    }
    if (componentId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'componentId' was not present! Struct: " + toString());
    }
    if (blob == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blob' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelResponseStandardSchemeFactory implements SchemeFactory {
    public ModelResponseStandardScheme getScheme() {
      return new ModelResponseStandardScheme();
    }
  }

  private static class ModelResponseStandardScheme extends StandardScheme<ModelResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelType = iprot.readString();
              struct.setModelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPONENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.componentId = iprot.readString();
              struct.setComponentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blob = iprot.readString();
              struct.setBlobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.modelType != null) {
        oprot.writeFieldBegin(MODEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.modelType);
        oprot.writeFieldEnd();
      }
      if (struct.componentId != null) {
        oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
        oprot.writeString(struct.componentId);
        oprot.writeFieldEnd();
      }
      if (struct.blob != null) {
        oprot.writeFieldBegin(BLOB_FIELD_DESC);
        oprot.writeString(struct.blob);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelResponseTupleSchemeFactory implements SchemeFactory {
    public ModelResponseTupleScheme getScheme() {
      return new ModelResponseTupleScheme();
    }
  }

  private static class ModelResponseTupleScheme extends TupleScheme<ModelResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.modelType);
      oprot.writeString(struct.componentId);
      oprot.writeString(struct.blob);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.modelType = iprot.readString();
      struct.setModelTypeIsSet(true);
      struct.componentId = iprot.readString();
      struct.setComponentIdIsSet(true);
      struct.blob = iprot.readString();
      struct.setBlobIsSet(true);
    }
  }

}

