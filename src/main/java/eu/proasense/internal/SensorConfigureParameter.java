/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package eu.proasense.internal;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-31")
public class SensorConfigureParameter implements org.apache.thrift.TBase<SensorConfigureParameter, SensorConfigureParameter._Fields>, java.io.Serializable, Cloneable, Comparable<SensorConfigureParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SensorConfigureParameter");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("componentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SENSOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SensorConfigureParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SensorConfigureParameterTupleSchemeFactory());
  }

  public long timestamp; // required
  public String componentId; // required
  public String sensorId; // required
  /**
   * 
   * @see SensorParameter
   */
  public SensorParameter parameter; // required
  public double value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    COMPONENT_ID((short)2, "componentId"),
    SENSOR_ID((short)3, "sensorId"),
    /**
     * 
     * @see SensorParameter
     */
    PARAMETER((short)4, "parameter"),
    VALUE((short)5, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // COMPONENT_ID
          return COMPONENT_ID;
        case 3: // SENSOR_ID
          return SENSOR_ID;
        case 4: // PARAMETER
          return PARAMETER;
        case 5: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __VALUE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSOR_ID, new org.apache.thrift.meta_data.FieldMetaData("sensorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorParameter.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SensorConfigureParameter.class, metaDataMap);
  }

  public SensorConfigureParameter() {
  }

  public SensorConfigureParameter(
    long timestamp,
    String componentId,
    String sensorId,
    SensorParameter parameter,
    double value)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.componentId = componentId;
    this.sensorId = sensorId;
    this.parameter = parameter;
    this.value = value;
    setValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SensorConfigureParameter(SensorConfigureParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetComponentId()) {
      this.componentId = other.componentId;
    }
    if (other.isSetSensorId()) {
      this.sensorId = other.sensorId;
    }
    if (other.isSetParameter()) {
      this.parameter = other.parameter;
    }
    this.value = other.value;
  }

  public SensorConfigureParameter deepCopy() {
    return new SensorConfigureParameter(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.componentId = null;
    this.sensorId = null;
    this.parameter = null;
    setValueIsSet(false);
    this.value = 0.0;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public SensorConfigureParameter setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getComponentId() {
    return this.componentId;
  }

  public SensorConfigureParameter setComponentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  public void unsetComponentId() {
    this.componentId = null;
  }

  /** Returns true if field componentId is set (has been assigned a value) and false otherwise */
  public boolean isSetComponentId() {
    return this.componentId != null;
  }

  public void setComponentIdIsSet(boolean value) {
    if (!value) {
      this.componentId = null;
    }
  }

  public String getSensorId() {
    return this.sensorId;
  }

  public SensorConfigureParameter setSensorId(String sensorId) {
    this.sensorId = sensorId;
    return this;
  }

  public void unsetSensorId() {
    this.sensorId = null;
  }

  /** Returns true if field sensorId is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorId() {
    return this.sensorId != null;
  }

  public void setSensorIdIsSet(boolean value) {
    if (!value) {
      this.sensorId = null;
    }
  }

  /**
   * 
   * @see SensorParameter
   */
  public SensorParameter getParameter() {
    return this.parameter;
  }

  /**
   * 
   * @see SensorParameter
   */
  public SensorConfigureParameter setParameter(SensorParameter parameter) {
    this.parameter = parameter;
    return this;
  }

  public void unsetParameter() {
    this.parameter = null;
  }

  /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
  public boolean isSetParameter() {
    return this.parameter != null;
  }

  public void setParameterIsSet(boolean value) {
    if (!value) {
      this.parameter = null;
    }
  }

  public double getValue() {
    return this.value;
  }

  public SensorConfigureParameter setValue(double value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case COMPONENT_ID:
      if (value == null) {
        unsetComponentId();
      } else {
        setComponentId((String)value);
      }
      break;

    case SENSOR_ID:
      if (value == null) {
        unsetSensorId();
      } else {
        setSensorId((String)value);
      }
      break;

    case PARAMETER:
      if (value == null) {
        unsetParameter();
      } else {
        setParameter((SensorParameter)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case COMPONENT_ID:
      return getComponentId();

    case SENSOR_ID:
      return getSensorId();

    case PARAMETER:
      return getParameter();

    case VALUE:
      return Double.valueOf(getValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case COMPONENT_ID:
      return isSetComponentId();
    case SENSOR_ID:
      return isSetSensorId();
    case PARAMETER:
      return isSetParameter();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SensorConfigureParameter)
      return this.equals((SensorConfigureParameter)that);
    return false;
  }

  public boolean equals(SensorConfigureParameter that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_componentId = true && this.isSetComponentId();
    boolean that_present_componentId = true && that.isSetComponentId();
    if (this_present_componentId || that_present_componentId) {
      if (!(this_present_componentId && that_present_componentId))
        return false;
      if (!this.componentId.equals(that.componentId))
        return false;
    }

    boolean this_present_sensorId = true && this.isSetSensorId();
    boolean that_present_sensorId = true && that.isSetSensorId();
    if (this_present_sensorId || that_present_sensorId) {
      if (!(this_present_sensorId && that_present_sensorId))
        return false;
      if (!this.sensorId.equals(that.sensorId))
        return false;
    }

    boolean this_present_parameter = true && this.isSetParameter();
    boolean that_present_parameter = true && that.isSetParameter();
    if (this_present_parameter || that_present_parameter) {
      if (!(this_present_parameter && that_present_parameter))
        return false;
      if (!this.parameter.equals(that.parameter))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_componentId = true && (isSetComponentId());
    list.add(present_componentId);
    if (present_componentId)
      list.add(componentId);

    boolean present_sensorId = true && (isSetSensorId());
    list.add(present_sensorId);
    if (present_sensorId)
      list.add(sensorId);

    boolean present_parameter = true && (isSetParameter());
    list.add(present_parameter);
    if (present_parameter)
      list.add(parameter.getValue());

    boolean present_value = true;
    list.add(present_value);
    if (present_value)
      list.add(value);

    return list.hashCode();
  }

  @Override
  public int compareTo(SensorConfigureParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponentId()).compareTo(other.isSetComponentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentId, other.componentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensorId()).compareTo(other.isSetSensorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorId, other.sensorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SensorConfigureParameter(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("componentId:");
    if (this.componentId == null) {
      sb.append("null");
    } else {
      sb.append(this.componentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorId:");
    if (this.sensorId == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameter:");
    if (this.parameter == null) {
      sb.append("null");
    } else {
      sb.append(this.parameter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorConfigureParameterStandardSchemeFactory implements SchemeFactory {
    public SensorConfigureParameterStandardScheme getScheme() {
      return new SensorConfigureParameterStandardScheme();
    }
  }

  private static class SensorConfigureParameterStandardScheme extends StandardScheme<SensorConfigureParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SensorConfigureParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPONENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.componentId = iprot.readString();
              struct.setComponentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENSOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensorId = iprot.readString();
              struct.setSensorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parameter = eu.proasense.internal.SensorParameter.findByValue(iprot.readI32());
              struct.setParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SensorConfigureParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.componentId != null) {
        oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
        oprot.writeString(struct.componentId);
        oprot.writeFieldEnd();
      }
      if (struct.sensorId != null) {
        oprot.writeFieldBegin(SENSOR_ID_FIELD_DESC);
        oprot.writeString(struct.sensorId);
        oprot.writeFieldEnd();
      }
      if (struct.parameter != null) {
        oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
        oprot.writeI32(struct.parameter.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorConfigureParameterTupleSchemeFactory implements SchemeFactory {
    public SensorConfigureParameterTupleScheme getScheme() {
      return new SensorConfigureParameterTupleScheme();
    }
  }

  private static class SensorConfigureParameterTupleScheme extends TupleScheme<SensorConfigureParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SensorConfigureParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.timestamp);
      BitSet optionals = new BitSet();
      if (struct.isSetComponentId()) {
        optionals.set(0);
      }
      if (struct.isSetSensorId()) {
        optionals.set(1);
      }
      if (struct.isSetParameter()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetComponentId()) {
        oprot.writeString(struct.componentId);
      }
      if (struct.isSetSensorId()) {
        oprot.writeString(struct.sensorId);
      }
      if (struct.isSetParameter()) {
        oprot.writeI32(struct.parameter.getValue());
      }
      if (struct.isSetValue()) {
        oprot.writeDouble(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SensorConfigureParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.componentId = iprot.readString();
        struct.setComponentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sensorId = iprot.readString();
        struct.setSensorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parameter = eu.proasense.internal.SensorParameter.findByValue(iprot.readI32());
        struct.setParameterIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readDouble();
        struct.setValueIsSet(true);
      }
    }
  }

}

